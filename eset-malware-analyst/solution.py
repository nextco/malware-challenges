# Complete Solution for https://join.eset.com/en/challenges/malware-analyst
# https://join.eset.com/en/challenges/crack-me
#! Python 2.7 x64
# by @rextco
from __future__ import print_function
import sys


# for debug
def print_bytes(list_input, dbg_msg=''):
    print(dbg_msg)
    for _ in list_input:
        print(hex(_), end=' ')
    print("\n")


def print_bytes_line_by_line(list_input, dbg_msg=''):
    print(dbg_msg)
    line_counter = 0
    for _ in list_input:
        print(line_counter, "\t=> ", hex(_), "\t", chr(_) )
        line_counter = line_counter + 1


def bytes_to_str(list_input):
    output = ""
    for byte in list_input:
        # print(type(chr(byte)), byte)
        output += chr(byte)
    return output


def str_to_bytes(str_input):
    output = []
    for l in str_input:
        output.append(ord(l))
    return output


# Trim hex value to low (cl) 8 bits, output
def hex_to_8_bits(hex_value):
    return hex_value & 0xFF


def deofuscate_bytes_toogle(bytes_ofuscated_input, lenght_bytes, k_one, k_two):
    print("len(bytes_ofuscated_input) = ", hex(len(bytes_ofuscated_input)))
    counter = 0x0                               # 00401354 mov[ebp+_counter], 0

    bytes_ofuscated_output = []
    while counter < lenght_bytes:                       # 004013BC jnb short loc_4013E4
        eax = bytes_ofuscated_input[counter]            # 004013C4 movsx eax, byte ptr [edx]
        ecx = k_one                                     # 004013C7 movzx   ecx, [ebp+_k_one]
        eax = eax ^ ecx                                 # 004013CB xor eax, ecx
        al = hex_to_8_bits(eax)
        # print("\ndebug: ", counter, hex(eax))
        # print("k_one: ", hex(k_one))

        bytes_ofuscated_output.append(al)               # 004013CD mov edx, [ebp+_pointer_bytes_ofuscated]
                                                        # 004013D0 add edx, [ebp+_counter]
                                                        # 004013D3 mov [edx]

        eax = k_two                                     # 004013D5 movzx eax, [ebp+_k_two]
        ecx = k_one                                     # 004013D9 movzx   ecx, [ebp+_k_one]
        ecx = ecx + eax                                 # 004013DD add ecx, eax
        cl = hex_to_8_bits(ecx)
        k_one = cl                                      # 004013DF mov [ebp+_k_one]

        counter = counter + 1                           # 004013AD mov eax, [ebp+_counter]
                                                        # 004013B0 add eax, 1
                                                        # 004013B3 mov [ebp+_counter]
    return bytes_ofuscated_output


# Return decrypted bytes
def decrypt_bytes(bytes_encrypted_input, lenght_bytes_encrypted_input, bytes_password_input, len_bytes_password_input, k_one):
    # print_bytes(bytes_encrypted_input, "bytes_encrypted_input")
    # print_bytes(bytes_password_input, "bytes_password_input")
    # print(bytes_to_str(bytes_password_input))
    print("len(bytes_encrypted_input) = ", hex(len(bytes_encrypted_input)))
    counter = 0x0                                    # 00401354 mov     [ebp+_counter], 0

    bytes_decrypted_output = []
    while lenght_bytes_encrypted_input > counter:   # 0040136C jnb short _exit_loop_decrypt
        ecx = bytes_encrypted_input[counter]        # 0040136E mov edx, [ebp+_pointer_bytes_encrypted]
                                                    # 00401371 add edx, [ebp+_counter]
                                                    # 00401374 movsx ecx, byte ptr [edx]

        edx = 0x0                                   # 0040137A xor edx, edx ; clear dividend
        eax = counter / len_bytes_password_input    # 0040137C div [ebp+_k_0xA]    ; _k_0xA = divisor
                                                    # eax = division, edx = remainder.
        edx = counter % len_bytes_password_input
        edx = bytes_password_input[edx]             # 0040137F mov eax, [ebp+_pointer_bytes_password_correct]
                                                    # 00401382 movsx edx, byte ptr [eax+edx]

        eax = k_one                                 # 00401386 movzx eax, [ebp+_k_0x2]
        edx = edx + eax                             # 0040138A add edx, eax
        ecx = ecx ^ edx                             # 0040138C xor ecx, edx

        cl = hex_to_8_bits(ecx)
        # print("debug: ", counter, hex(ecx))
        # bytes_encrypted_input[counter] = cl      # 0040138E mov edx, [ebp+_pointer_bytes_encrypted]
                                                    # 00401391 add edx, [ebp+_counter]
                                                    # 00401394 mov [edx], cl
        bytes_decrypted_output.append(cl) # for debug only

        counter = counter + 1                       # 0040135D mov eax, [ebp+_counter]
                                                    # 00401360 add eax, 1
                                                    # 00401363 mov [ebp+_counter]
    return bytes_decrypted_output


def add_bytes_values_in_range(list_input, min_range,max_range):
    add = 0
    for i in range(min_range, max_range):
        add += list_input[i]
    return add

# Start script
print(" => Reto Eset\n")

# Please enter valid password :
# bytes_ofuscated = [0x75, 0x44, 0x4E, 0x4F, 0x42, 0x51, 0x17, 0x5F, 0x53, 0x34, 0x26, 0x34, 0x69, 0x3A, 0x2E, 0x3E, 0x3C, 0x3C, 0x7B, 0x2E, 0x0, 0x17, 0x14, 0x1D, 0x2, 0x2, 0x17, 0x56, 0x43, 0x5C, 0x7F]
# bytes_deofuscated = deofuscate_bytes_toogle(bytes_ofuscated, len(bytes_ofuscated), 0x25, 0x3)
# print_bytes(bytes_deofuscated, "bytes_deofuscated")
# print(bytes_to_str(bytes_deofuscated))

# A litle help msg
bytes_ofuscated = [0x33, 0x50, 0x73, 0x4E, 0x42, 0x0B, 0x47, 0x5A, 0x48, 0x54, 0x6A, 0x69, 0x2, 0x3A, 0x2C, 0x29, 0x0E, 0x2, 0x4C, 0x19, 0x13, 0x17, 0x0F0, 0x0BF, 0x80, 0x0EC, 0x0FC, 0x0F8, 0x0EC, 0x0F8, 0x90, 0x0F0, 0x92, 0x8A, 0x9C, 0x0F9, 0x0F3, 0x0C1, 0x0B3, 0x0BD, 0x0BB, 0x0AD, 0x0BF, 0x0D9, 0x0B3, 0x0D3, 0x0D3, 0x0DD, 0x61, 0x6F, 0x6D, 0x63, 0x4D, 0x29, 0x7D, 0x5, 0x17, 0x0F, 0x5, 0x0B, 0x6, 0x49, 0x2B, 0x25, 0x33, 0x25, 0x7, 0x55, 0x3B, 0x4B, 0x5D, 0x55, 0x19, 0x17, 0x0E5, 0x0FB, 0x0D5, 0x0A4, 0x0C5, 0x0BD, 0x9F, 0x87, 0x81, 0x84, 0x86, 0x0B1, 0x0A3, 0x0AD, 0x0AB, 0x0BD, 0x8F, 0x0EF, 0x83, 0x0C3, 0x0C3, 0x0CD, 0x91, 0x9F, 0x9D, 0x73, 0x5D, 0x32, 0x4D, 0x35, 0x27, 0x3F, 0x16, 0x18, 0x17, 0x39]

bytes_deofuscated = deofuscate_bytes_toogle(bytes_ofuscated, len(bytes_ofuscated), 0x12, 5)
# print_bytes(bytes_deofuscated, "bytes_deofuscated")
print(bytes_to_str(bytes_deofuscated))


# Equations
print("Equations solve:")
bytes_password = [0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0]     # char_0, char_1, ...., char_9

bytes_password[8] = 85  # From litle help
# bytes_password[8] + bytes_password[5] = 0xc9    # 004014C1
bytes_password[5] = 0xC9 - bytes_password[8]    # Solving previus line

# char_6 + char_7 = 0xCD (*)
# char_4 - char_7 = -50     =>                                      => char_4 + char_6 = 155 (*)

# char_6 + char_7 + char_3 = 0x13A      # 004014F8
bytes_password[3] = 0x13A - 0xCD

# char_9 + char_4 + char_8 + char_5 = 0x16F => char_9 + char_4 = 166=> char_9 = 166 - char_4 (**)
# char_6 + char_9 = 219  => char_6 + 166 - char_4 = 219             => char_6 - char_4 =  53 (*)

# 2*char_6 = 208, sumando las dos ecuaciones (*)
bytes_password[6] = 208/2
bytes_password[4] = 155 - bytes_password[6]
bytes_password[7] = 0xcd - bytes_password[6]

# from **
bytes_password[9] = 166 - bytes_password[4]

# char_1 + char_0 = 0x0C2 ($$)  =>                                      => char_0 = 0xc2 - char_1 (***)
# char_0 + char_2 = 128         => 0xc2 - char_1 + char_2 = 128         => char_2 - char_1 = -66    ($)
# char_0 + char_1 + char_2 + char_3 + char_4 + char_5 + char_6 + char_7 + char_8 + char_9 == 0x39B (***)
# 0xc2 + char_2 + .... = 0x39B
# print( add_bytes_values_in_range(bytes_password, 3, len(bytes_password)))
bytes_password[2] = 0x39B - (0xC2 + add_bytes_values_in_range(bytes_password, 3, len(bytes_password)))  #[3-9]

# from $
bytes_password[0] = 128 - bytes_password[2]

# from $$
bytes_password[1] = 0xc2 - bytes_password[0]

print_bytes_line_by_line(bytes_password,"bytes_password")
print(bytes_to_str(bytes_password))


# Provide normal message with correct password
# bytes_encrypted = [0x11, 0x1B, 0x5C, 0x8, 0x47, 0x17, 0x1E, 0x12, 0x3B, 0x14, 0x26, 0x1D, 0x5D, 0x1, 0x46, 0x57, 0x4A, 0x3E, 0x38, 0x0, 0x72, 0x13, 0x47, 0x0A, 0x46, 0x5, 0x0F, 0x3, 0x77, 0x1, 0x3A, 0x11, 0x12, 0x1D, 0x5C, 0x11, 0x2, 0x13, 0x77, 0x5, 0x33, 0x7, 0x41, 0x18, 0x5A, 0x4, 0x0E, 0x4B, 0x77, 0x17, 0x27, 0x0, 0x12, 0x1B, 0x5D, 0x13, 0x4A, 0x0A, 0x32, 0x6, 0x21, 0x15, 0x55, 0x0A, 0x15, 0x0F, 0x5, 0x12, 0x77, 0x6, 0x37, 0x11, 0x12, 0x6, 0x46, 0x56, 0x1D, 0x15, 0x38, 0x1B, 0x35, 0x5A, 0x38, 0x3B, 0x47, 0x0F, 0x4A, 0x13, 0x38, 0x55, 0x3E, 0x1B, 0x5D, 0x4, 0x15, 0x10, 0x5, 0x15, 0x77, 0x6, 0x3D, 0x19, 0x57, 0x4F, 0x40, 0x18, 0x18, 0x2, 0x31, 0x10, 0x20, 0x11, 0x5C, 0x0C, 0x50, 0x12, 0x4A, 0x3, 0x36, 0x1, 0x33, 0x58, 0x12, 0x1B, 0x5D, 0x17, 0x1E, 0x47, 0x34, 0x14, 0x3C, 0x54, 0x50, 0x0A, 0x15, 0x12, 0x0F, 0x4, 0x25, 0x0C, 0x22, 0x0, 0x57, 0x0B, 0x15, 0x2, 0x2, 0x2, 0x77, 0x6, 0x33, 0x19, 0x57, 0x4F, 0x42, 0x17, 0x13, 0x47, 0x36, 0x6, 0x72, 0x0, 0x5A, 0x6, 0x46, 0x56, 0x1E, 0x2, 0x2F, 0x1, 0x7C, 0x7E, 0x32, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0]

# bytes_decrypted = decrypt_bytes(bytes_encrypted, len(bytes_encrypted), bytes_password, len(bytes_password), 0x2)
# print_bytes(bytes_decrypted, "bytes_decrypted")
# print(bytes_to_str(bytes_decrypted))

# Hidden message
# unallocated data founded in .data:004181A8 buffer_byte_size = 256
hidden_bytes = [0x3A, 0x0, 0x46, 0x1F, 0x46, 0x4C, 0x45, 0x48, 0x3D, 0x1A, 0x3B, 0x1A, 0x1C, 0x0A, 0x46, 0x13, 0x1E, 0x49, 0x34, 0x1A, 0x3F, 0x5B, 0x53, 0x0A, 0x0, 0x46, 0x8, 0x51, 0x66, 0x41, 0x6B, 0x4D, 0x56, 0x5D, 0x2, 0x12, 0x5D, 0x3, 0x36, 0x45, 0x63, 0x44, 0x51, 0x58, 0x4, 0x4E, 0x0C, 0x55, 0x61, 0x40, 0x33, 0x4D, 0x53, 0x5E, 0x1A, 0x15, 0x18, 0x6, 0x34, 0x1E, 0x3F, 0x11, 0x1C, 0x15, 0x5C, 0x6, 0x6A, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0]

print_bytes(hidden_bytes, "hidden_bytes")
hidden_msg = decrypt_bytes(hidden_bytes, len(hidden_bytes), bytes_password, len(bytes_password), 0x2)
# print_bytes(hidden_msg, "hidden_msg")
print(bytes_to_str(hidden_msg))


