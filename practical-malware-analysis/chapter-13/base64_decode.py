# Python 3.7 x64 Windows
# by @rextco
from functools import reduce
import base64


def read_file(file_name):
    with open(file_name, "rb") as fp:
        c = fp.read()
    return c


def write_file(file_name, content):
    with open(file_name, "wb") as f:
        f.write(content)


def split_buf(buf, size=6):
    c = [buf[i: i + size] for i in range(0, len(buf), size)]    # split every 6 bits
    return c


def base64_manual(encoded):
    keymap = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/"

    # ascii to bytes > split every single byte
    hex_values = reduce(lambda x, y: x + y, map(hex, list(encoded))).replace("0x", "")
    print(hex_values)
    hex_values = map(lambda x: int(x), list(hex_values))

    # bytes to bin > concatenate
    bin_values = reduce(lambda x, y: x + y, map(lambda b: "{:04b}".format(b), hex_values))
    print(bin_values)
    chunks = split_buf(bin_values, 6)
    print(chunks)

    # chunks (6 size) to bytes > bytes to string
    decoded = reduce(lambda x, y: x + y, map(lambda b: keymap[int(b, 2)], chunks))
    return decoded


def base64_custom(encoded):
    keymap = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/"
    keymap_custom = "aABCDEFGHIJKLMNOPQRSTUVWXYZbcdefghijklmnopqrstuvwxyz0123456789+/"

    buf = reduce(lambda x, y: x + y, map(lambda c: keymap[str.find(keymap_custom, c)] if c != '=' else '=', list(encoded)))
    decoded = base64.decodebytes(bytearray(buf, encoding="utf-8"))
    return decoded


if __name__ == "__main__":
    data = read_file("base64_manual.bin")
    print("input = {}".format(data))
    d = base64_manual(data)
    print("output = {}".format(d))

    words = ["X29tbVEuYC8=", "c2UsYi1kYWM0cnUjdFlvbiAjb21wbFU0YP=="]
    for w in words:
        print(base64_custom(w))

